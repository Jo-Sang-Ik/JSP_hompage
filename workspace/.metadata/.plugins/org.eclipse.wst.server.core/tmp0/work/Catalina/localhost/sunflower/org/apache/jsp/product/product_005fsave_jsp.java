/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2020-05-06 03:44:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.plantshop.product.*;
import java.sql.*;
import java.util.*;
import java.text.*;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

public final class product_005fsave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.plantshop.product");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품 등록 처리</title>\r\n");
      out.write("<style>\r\n");
      out.write("\t#container { width: 500px; margin: 0 auto;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

request.setCharacterEncoding("utf-8"); 

// 1번 방법 - 업로드된 이미지를 외부 폴더로 지정하는 방법
String fileurl = "c:/plantshop";

// 2번 방법 - 업로드된 이미지를 프로젝트에 포함시키는 방법 
// String fileurl = request.getRealPath("upload");
// fileurl의 경로 - C:/ncs_sangik/jsp01/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Chapter12/upload
// String saveFolder = "upload"; // 프로젝트에 폴더 생성
// out.print("파일이 업로드되는 절대 경로 : " + fileurl + "<br>");

// 3번 방법 - deprecated된 2번 방법을 수정
//ServletContext context = getServletContext(); // 프로젝트의 경로 
//String saveFolder = "upload"; // 파일이 업로드되는 폴더
//String fileurl = context.getRealPath(saveFolder); // 파일이 업로드되는 절대경로
// fileurl의 경로 (위와 같음)- C:/ncs_sangik/jsp01/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/Chapter12/upload
// out.print("프로젝트의 경로 : " + context.getRealPath("") + "<br>");
// out.print("파일이 업로드 되는 절대 경로 : " + fileurl + "<br>");

int maxsize = 5 * 1024 * 1024; // 5MB, 최대크기
String enctype = "utf-8";
DefaultFileRenamePolicy policy = new DefaultFileRenamePolicy();

//form이 multi 타입이여서 사용
MultipartRequest multi = new MultipartRequest(request, fileurl, maxsize, enctype, policy);

java.util.Date yymmdd = new java.util.Date();
SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd a hh:mm:ss");
String inputdate = myFormat.format(yymmdd);

ArrayList<String> imageList = new ArrayList<String>();

//MultipartRequest는 이미지를 올린 반대순으로 불러온다.
//imageList에는 이미지가 거꾸로 들어가 있다.
//해결책 1 - imageList를 거꾸로 뒤집어서 올린 순서를 원래대로 맞춘다.
//해결책 2 - imageList의 있는 이미지를 DB에 넣을 때 거꾸로 넣는다
Enumeration<String> images = multi.getFileNames();
while(images.hasMoreElements()) {
	String f1 = images.nextElement();
	String f2 = multi.getFilesystemName(f1);
	imageList.add(f2);
}
//	out.print("정렬전 imageList : " + imageList + "<br>");
//	거꾸로 뒤집은 imageList - X = 파일의 이름으로 정렬을해서 이미지를 올린 순서대로 안됨.
//	Collections.sort(imageList);
//	out.print("imageList : " + imageList + "<br>");

ProductDataBean article = new ProductDataBean();

article.setWname(multi.getParameter("wname"));
article.setCategory(multi.getParameter("category"));
article.setPname(multi.getParameter("pname"));
article.setSname(multi.getParameter("sname"));
article.setPrice(Integer.parseInt(multi.getParameter("price")));
article.setDownprice(Integer.parseInt(multi.getParameter("downprice")));
article.setStock(Integer.parseInt(multi.getParameter("stock")));
article.setDescription(multi.getParameter("description"));
article.setMditem(multi.getParameter("mditem"));
article.setSelling(multi.getParameter("selling"));
article.setInputdate(inputdate);
article.setSmall_img(imageList.get(0));
article.setImg1(imageList.get(4));
article.setImg2(imageList.get(3));
article.setImg3(imageList.get(2)); 
article.setImg4(imageList.get(1));

System.out.println(article);

ProductDBBean dbPro = ProductDBBean.getInstance();
int check = dbPro.insertProduct(article);
 	
if(check > 0) {
	out.print("<script>alert('상품이 정상적으로 등록되었습니다.'); location='product_list.jsp';</script>");
} else {
	out.print("<script>alert('상품이 등록되지 않았습니다.'); history.back();</script>");
} 

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
