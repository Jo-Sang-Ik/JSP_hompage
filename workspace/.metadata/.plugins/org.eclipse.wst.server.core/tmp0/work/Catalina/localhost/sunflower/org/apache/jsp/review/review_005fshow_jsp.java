/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2020-04-23 00:53:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.review;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import com.plantshop.review.*;

public final class review_005fshow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("com.plantshop.review");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/review_show.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("\t<h3>상품후기</h3>\r\n");

request.setCharacterEncoding("utf-8");

// 상세페이지에서 넘오오는 상품아이디 저장
int pid = Integer.parseInt(request.getParameter("pid")); 

// 페이지 - 한 화면, 로우 - 글의 수
int pageSize = 3; // 화면에서 표시할 글의 갯수
String pageNum = request.getParameter("pageNum"); // 넘어오는 페이지 번호 // 넘어오다 빠질 수 있으므로 int로 받지않음.

if(pageNum == null) { // 처음페이지를 열었을 때 아무페이지도 없을 때를 위해 작성.
	pageNum = "1"; // 처음 페이지
}

int currentPage = Integer.parseInt(pageNum); // 현재 페이지 번호
int startRow = (currentPage - 1) * pageSize + 1; // // 현재 페이지에서 보여줄 첫번째 글 [ex. (3 - 1) * 3 + 1 = 7 ]
int endRow = currentPage * pageSize; // 3 * 3 = 9 // 이게 맞지.
int totalRow = 0; // 전체 글 수

ReviewDBBean dbPro = ReviewDBBean.getInstance();
totalRow = dbPro.getReviewCount(pid);

List<ReviewDataBean> reviewList = dbPro.getReviewList(pid, startRow, pageSize);
	
if(reviewList.isEmpty()) {
	out.println("<div style='text-align: center'><hr>등록한 글이 없습니다.<hr></div>");
} else {
	for(ReviewDataBean review : reviewList) { // select할때 limit를 써줘서 이렇게 된다^^

      out.write("\r\n");
      out.write("\t<table> <!-- 테이블을 하나씩 만들어야하기때문에  for문안에 모두 넣어줘야한다. -->\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>제목 : ");
      out.print(review.getSubject() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>작성자 : ");
      out.print(review.getName() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>작성일 : ");
      out.print(review.getInputdate() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<!-- pre를 써서 작성된 모양대로 나오게함 -->\r\n");
      out.write("\t\t\t<td><pre>");
      out.print(review.getContent() );
      out.write("</pre></td> \r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");

	} // for
} // else


// 페이징 처리
out.println("<div id='paging'>");

if(totalRow > 0) {
	// int pageCount = (totalRow - 1) / pageSize + 1;           // true : false
	int totalPage = totalRow / pageSize + (totalRow % pageSize == 0 ? 0 : 1); // 전체 페이지 수 // 직관적으로 나머지가 생기면 1을 더해주는 참 좋다~
	int startPage = 1; // 시작페이지
	
	int count = 3; // 표시할 페이지의 수. ex) 3이라면[1][2][3], 
	
	if(currentPage % count != 0) { // 페이지를 보여줄 갯수
		startPage = (int)(currentPage/count)*count + 1;
	} else {	
		startPage = (int)((currentPage/count)-1)*count + 1;
	}
	
	int endPage = startPage + count - 1; // 1, 4 // 1 + 3 - 1 = 3 // 4 + 3 - 1 = 6
	if(endPage > totalPage) endPage = totalPage;
	
	// 1. 이전을 눌렀을 때 1페이지씩 이전으로 이동
	if(currentPage > 1) {
		out.println("<a href='review_show.jsp?pid="+pid+"&pageNum=1'>");
		out.println("<div id='pnum' class='page'>&lt&lt</div></a>");
		
		out.println("<a href='review_show.jsp?pid="+pid+"&pageNum=" + (currentPage-1) + "'>");
		out.println("<div id='pnum' class='page'>&lt</div></a>");
	} else {
		out.println("<div id='pnum' class='page'>&lt&lt</div>");
		out.println("<div id='pnum' class='page'>&lt</div>");
	}
	
	// 2. 이전 페이지 유무 확인 // 이전을 눌렀을 때 count페이지(보여지는 페이지 갯수) 만큼 이전으로 이동
	/* if(startPage > count) { // 이전을 바꾸고 싶으면 pageNum을 혹은 cuurentPage를 3으로 나눴을때 1이면
		out.println("[<a href='review_show.jsp?pageNum=1'>처음</a>]");
		// out.println("[<a href='review_show.jsp?pageNum=" + (startPage-count) + "'>이전</a>]");
		out.println("[<a href='review_show.jsp?pageNum=" + (currentPage-1) + "'>이전</a>]");
	} else {
		out.println("[처음]");
		out.println("[이전]");
	} */
	
	// 페이지 번호 출력
	for(int i=startPage; i<=endPage; i++) {
		if(i == currentPage) {
			out.println("<div id='pnum' class='spnum'>" + i + "</div>");
		} else {
			out.println("<a href='review_show.jsp?pid="+pid+"&pageNum=" + i + "'>");
			out.println("<div id='pnum'>" + i + "</div></a>");
		}
	}
	
	// 1. 다음을 눌렀을 대 1페이지씩 다음으로 이동
	if(currentPage < totalPage) {
		out.print("<a href='review_show.jsp?pid="+pid+"&pageNum=" + (currentPage+1) + "'>");
		out.println("<div id='pnum' class='page'>&gt;</div></a>");
		
		out.println("<a href='review_show.jsp?pid="+pid+"&pageNum=" + totalPage + "'>");
		out.println("<div id='pnum' class='page'>&gt;&gt;</div></a>");
	} else {
		out.println("<div id='pnum' class='page'>&gt;</div>");
		out.println("<div id='pnum' class='page'>&gt;&gt;</div>");
	}
	
	// 다음 페이지 유무
	// 2. 다음을 눌렀을 때 count페이지만큼 다음으로 이동
	/* if(endPage < totalPage) {
		out.println("[<a href='review_show.jsp?pageNum=" + (startPage+count) + "'>다음</a>]");
		out.println("[<a href='review_show.jsp?pageNum=" + totalPage + "'>마지막</a>]");
	} else {
		out.println("[다음]");
		out.println("[마지막]");
	} */
	out.println("&nbsp;<font id='tot_pages' color='blue'>" + currentPage + "/" + totalPage + "</font>");
}
	
out.println("</div>");

if(session.getAttribute("login_id") !=null) {

      out.write("\r\n");
      out.write("<p><a href=\"review_write.jsp?pid=");
      out.print(pid );
      out.write("\"><img src=\"./image/write.gif\" width=\"60\" height=\"25\"></a></p>\r\n");
      out.write("<!-- <div class=\"move\"><a href=\"review_write.jsp\"><img src=\"./image/write.gif\" width=\"60\" height=\"25\"></a></div> -->\r\n");
} 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
